/**
 * Evoke Website API
 * This API provides endpoints used by the Evoke demoparty website. <br><br><a href='https://www.evoke.eu/imprint/'>Imprint</a><br><a href='https://www.evoke.eu/privacy/'>Privacy Information</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: api@evoke.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContactCategory from '../model/ContactCategory';
import ContactMessage from '../model/ContactMessage';
import Rfc7807 from '../model/Rfc7807';

/**
* Contact service.
* @module api/ContactApi
* @version 0.1.0
*/
export default class ContactApi {

    /**
    * Constructs a new ContactApi. 
    * @alias module:api/ContactApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMessage operation.
     * @callback module:api/ContactApi~createMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a new message
     * @param {module:model/ContactMessage} contactMessage Information about the message to be sent
     * @param {module:api/ContactApi~createMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createMessage(contactMessage, callback) {
      let postBody = contactMessage;
      // verify the required parameter 'contactMessage' is set
      if (contactMessage === undefined || contactMessage === null) {
        throw new Error("Missing the required parameter 'contactMessage' when calling createMessage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showAllCategories operation.
     * @callback module:api/ContactApi~showAllCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContactCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all contact categories
     * @param {module:api/ContactApi~showAllCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContactCategory>}
     */
    showAllCategories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContactCategory];
      return this.apiClient.callApi(
        '/contact/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
