/**
 * Evoke Website API
 * This API provides endpoints used by the Evoke demoparty website. <br><br><a href='https://www.evoke.eu/imprint/'>Imprint</a><br><a href='https://www.evoke.eu/privacy/'>Privacy Information</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: api@evoke.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Registration from '../model/Registration';
import Rfc7807 from '../model/Rfc7807';

/**
* Registration service.
* @module api/RegistrationApi
* @version 0.1.0
*/
export default class RegistrationApi {

    /**
    * Constructs a new RegistrationApi. 
    * @alias module:api/RegistrationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createRegistration operation.
     * @callback module:api/RegistrationApi~createRegistrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Registration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new registration
     * @param {Number} year Year to query for
     * @param {module:model/Registration} registration Information about the user to be added
     * @param {module:api/RegistrationApi~createRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Registration}
     */
    createRegistration(year, registration, callback) {
      let postBody = registration;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling createRegistration");
      }
      // verify the required parameter 'registration' is set
      if (registration === undefined || registration === null) {
        throw new Error("Missing the required parameter 'registration' when calling createRegistration");
      }

      let pathParams = {
        'year': year
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Registration;
      return this.apiClient.callApi(
        '/registration/{year}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistration operation.
     * @callback module:api/RegistrationApi~deleteRegistrationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a single registration
     * @param {Number} year Year to query for
     * @param {Number} id ID to delete
     * @param {String} key Hash to authenticate the deletion of this ID
     * @param {module:api/RegistrationApi~deleteRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteRegistration(year, id, key, callback) {
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling deleteRegistration");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRegistration");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteRegistration");
      }

      let pathParams = {
        'year': year,
        'id': id
      };
      let queryParams = {
        'key': key
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/registration/{year}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the numberOfRegistrations operation.
     * @callback module:api/RegistrationApi~numberOfRegistrationsCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the number of registrations
     * @param {Number} year Year to query for
     * @param {module:api/RegistrationApi~numberOfRegistrationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    numberOfRegistrations(year, callback) {
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling numberOfRegistrations");
      }

      let pathParams = {
        'year': year
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/registration/{year}/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showAllCountries operation.
     * @callback module:api/RegistrationApi~showAllCountriesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of countries
     * @param {module:api/RegistrationApi~showAllCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    showAllCountries(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/registration/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showAllRegistrations operation.
     * @callback module:api/RegistrationApi~showAllRegistrationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Registration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all registrations
     * @param {Number} year Year to query for
     * @param {module:api/RegistrationApi~showAllRegistrationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Registration>}
     */
    showAllRegistrations(year, callback) {
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling showAllRegistrations");
      }

      let pathParams = {
        'year': year
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Registration];
      return this.apiClient.callApi(
        '/registration/{year}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
