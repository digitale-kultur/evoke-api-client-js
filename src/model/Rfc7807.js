/**
 * Evoke Website API
 * This API provides endpoints used by the Evoke demoparty website. <br><br><a href='https://www.evoke.eu/imprint/'>Imprint</a><br><a href='https://www.evoke.eu/privacy/'>Privacy Information</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: api@evoke.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Rfc7807 model module.
 * @module model/Rfc7807
 * @version 0.1.0
 */
class Rfc7807 {
    /**
     * Constructs a new <code>Rfc7807</code>.
     * Json Problem model as defined in RFC 7807
     * @alias module:model/Rfc7807
     * @param type {String} A type URI with human-readable documentation for the problem type.
     */
    constructor(type) { 
        
        Rfc7807.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Rfc7807</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rfc7807} obj Optional instance to populate.
     * @return {module:model/Rfc7807} The populated <code>Rfc7807</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rfc7807();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('detail')) {
                obj['detail'] = ApiClient.convertToType(data['detail'], 'String');
            }
        }
        return obj;
    }


}

/**
 * A type URI with human-readable documentation for the problem type.
 * @member {String} type
 */
Rfc7807.prototype['type'] = undefined;

/**
 * A title that appropriately describes it (think short)
 * @member {String} title
 */
Rfc7807.prototype['title'] = undefined;

/**
 * A detail string — with human-readable explanation specific to this     occurrence of the problem.
 * @member {String} detail
 */
Rfc7807.prototype['detail'] = undefined;






export default Rfc7807;

